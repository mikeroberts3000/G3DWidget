#version 120 // -*- c++ -*-
/**
 Per-pixel Phong Shading

 This is an example of how to use shaders with GLSL and G3D, not an example of the best
 shader that you can write.  See data-files/SuperShader/SS_* for a more 
 sophisticated physically-based shader.  

 \file phong.pix
 \author Morgan McGuire, http://graphics.cs.williams.edu
 */

/////////////////////////////////////////////////////////////
// "Uniform" constants passed from C++

/** Intensity of the diffuse term. */
uniform float   diffuseScalar;

/** Diffuse/ambient surface color */
uniform vec3    diffuseColor;

/** Intensity of the specular term. */
uniform float   specularScalar;

/** Specular surface color.  Used for both glossy and perfect reflection. */
uniform vec3    specularColor;

/** Phong exponent; 100 = sharp highlight, 1 = broad highlight */
uniform float   shine;

/** Intensity of perfect reflections */
uniform float   reflect;

/** Unit world space direction to the (infinite, directional) light source */
uniform vec3    wsLight;

/** Color of the light source */
uniform vec3    lightColor;

/** Ambient light term. */
uniform vec3    ambient;

/** Environment cube map used for reflections */
uniform samplerCube environmentMap;

/** Modulates the environment map values to simulate darkness or increase
   dynamic range when tone mapping. */
uniform float   environmentConstant;

/////////////////////////////////////////////////////////////
// "Varying" variables passed from the vertex shader

varying vec3    wsInterpolatedNormal;
varying vec3    wsInterpolatedEye;

void main() {

    // Unit normal in world space
    vec3 wsNormal = normalize(wsInterpolatedNormal);

    // Unit vector from the pixel to the eye in world space
    vec3 wsEye = normalize(wsInterpolatedEye);

    // Unit vector giving the direction of perfect reflection into the eye
    vec3 wsReflect = 2.0 * dot(wsEye, wsNormal) * wsNormal - wsEye;

    // The "reflect" function is part of the GLSL specification but some NVIDIA drivers do not include it.
    // If you wanted to use that function, you could use the following line:
    // vec3 wsReflect = -reflect(wsEye, wsNormal);
    
    gl_FragColor.rgb =
        diffuseScalar  * diffuseColor  * (ambient + (max(dot(wsNormal, wsLight), 0.0) * lightColor)) +
        specularScalar * specularColor * (8.0 + shine) / 8.0 * pow(max(dot(wsReflect, wsLight), 0.0), shine) * lightColor +
        reflect        * specularColor * textureCube(environmentMap, wsReflect).rgb * environmentConstant;
}
